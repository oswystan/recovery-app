#!/usr/bin/env node
/*
 *********************************************************************************
 *                     Copyright (C) 2018 wystan
 *
 *       filename: wss-server.js
 *    description:
 *        created: 2018-06-28 23:24:00
 *         author: wystan
 *
 *********************************************************************************
 */

const SERVER_PORT = 8443;

var logi = (...args)=>console.info('I|'+new Date().toISOString(), ...args);
var logw = (...args)=>console.warn('W|'+new Date().toISOString(), ...args);
var loge = (...args)=>console.error('E|'+new Date().toISOString(), ...args);
var logd = (...args)=>console.log('D|'+new Date().toISOString(), ...args);

var https = require('https');
var fs = require('fs');
var express = require('express');
var app = express();
app.use(express.static('static'));

var credentials = {
    key: fs.readFileSync(__dirname + '/keys/key.pem', 'utf8'),
    cert: fs.readFileSync(__dirname + '/keys/cert.pem', 'utf8')
};
var server = https.createServer(credentials, app);
var expressWs = require('express-ws')(app, server);
server.listen(SERVER_PORT);
logi("listen on", SERVER_PORT);

let initError = [0, 11, 22, 33, 44, 55, 0];
let WSID = 1;

app.ws('/app/v1.0.0', (ws, req)=>{
    ws.id = WSID++;
    logi("new client", ws.id);

    ws.on('close', ()=>{
        logi('=> close!', ws.id);
    });

    function randomID() {
        return Math.ceil(Math.random()*1000000);
    }

    function handlePing() {
        let resp = {
            command: "ping",
            error: 0
        };
        ws.send(JSON.stringify(resp));
    }

    function handleInit(msg) {
        let error = initError.length == 0 ? 0 : initError[0];
        if (initError.length > 0 ) {
            initError.splice(0, 1);
        }
        logd("error: ", error);
        let resp = {
            command: "init",
            error: error,
            data: {
                id : randomID()
            }
        }
        ws.send(JSON.stringify(resp));
    }
    function handleJoin(msg) {
        let resp = {
            command: "join",
            error: 0,
        };
        ws.send(JSON.stringify(resp));
    }
    function handleLeave(msg) {
        let resp = {
            command: "leave",
            error: 0,
        };
        ws.send(JSON.stringify(resp));
    }
    function handlePublish(msg) {
        let resp = {
            command: "publish",
            error: 0,
            data : {
                sid: msg.sid,
                sdp: "answer sdp"
            }
        };
        ws.send(JSON.stringify(resp));
    }
    function handleSubscribe(msg) {
        let resp = {
            command: "subscribe",
            error: 0,
            data : {
                sid: msg.sid,
                sdp: "answer sdp"
            }
        };
        ws.send(JSON.stringify(resp));
    }
    function handleUnPublish(msg) {
        let resp = {
            command: "unpublish",
            error: 0,
            data : {
                sid: msg.sid
            }
        };
        ws.send(JSON.stringify(resp));
    }
    function handleUnSubscribe(msg) {
        let resp = {
            command: "unsubscribe",
            error: 0,
            data : {
                sid: msg.sid
            }
        };
        ws.send(JSON.stringify(resp));
    }

    let handlers = [
        {type : "ping",        handler: handlePing},
        {type : "init",        handler: handleInit},
        {type : "join",        handler: handleJoin},
        {type : "leave",       handler: handleLeave},
        {type : "publish",     handler: handlePublish},
        {type : "subscribe",   handler: handleSubscribe},
        {type : "unpublish",   handler: handleUnPublish},
        {type : "unsubscribe", handler: handleUnSubscribe},
    ];

    ws.on('message', (msg)=>{
        let cmd = JSON.parse(msg);
        if (cmd.command !== "ping") {
            logd("=> msg:", msg, ws.id);
        }
        for (let i = 0; i < handlers.length; i++) {
            if (handlers[i].type === cmd.command) {
                handlers[i].handler(cmd);
            }
        }
    });
});


/************************************* END **************************************/

